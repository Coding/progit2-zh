=== 图形界面

(((GUIs)))(((Graphical tools)))
Git 的原生环境是终端。
在那里，你可以体验到最新的功能，也只有在那里，你才能尽情发挥 Git 的全部能力。
但是对于某些任务而言，纯文本并不是最佳的选择；有时候你确实需要一个可视化的展示方式，而且有些用户更习惯那种能点击的界面。

有一点请注意，不同的界面是为不同的工作流程设计的。
一些客户端的作者为了支持某种他认为高效的工作流程，经过精心挑选，只显示了 Git 功能的一个子集。
每种工具都有其特定的目的和意义，从这个角度来看，不能说某种工具比其它的``更好''。
还有请注意，没有什么事情是图形界面客户端可以做而命令行客户端不能做的；命令行始终是你可以完全操控仓库并发挥出全部力量的地方。

==== `gitk` 和 `git-gui`

(((git commands, gitk)))(((git commands, gui)))(((gitk)))
在安装 Git 的同时，你也装好了它提供的可视化工具，`gitk` 和 `git-gui`。

`gitk` 是一个历史记录的图形化查看器。
你可以把它当作是基于 `git log` 和 `git grep` 命令的一个强大的图形操作界面。
当你需要查找过去发生的某次记录，或是可视化查看项目历史的时候，你将会用到这个工具。

使用 Gitk 的最简单方法就是从命令行打开。
只需 `cd` 到一个 Git 仓库，然后键入：

[source,console]
----
$ gitk [git log options]
----

Gitk 可以接受很多命令行选项，其中的大部分都直接传给底层的 `git log` 去执行了。
`--all` 可能是这其中最有用的一个, 它告诉 gitk 去尽可能地从 _任何_ 引用查找提交并显示，而不仅仅是从 HEAD。
Gitk 的界面看起来长这样：

.`gitk` 历史查看器。
image::images/gitk.png[`gitk` 历史查看器。]

这张图看起来就和执行 `git log --graph` 命令的输出差不多；每个点代表一次提交，线代表父子关系，而彩色的方块则用来标示一个个引用。
黄点表示 HEAD，红点表示尚未提交的本地变动。
下方的窗口用来显示当前选中的提交的具体信息；评论和补丁显示在左侧，摘要显示在右侧。
中间则是一组用来搜索历史的控件。

与之相比，`git-gui` 则主要是一个用来制作提交的工具。
打开它的最简单方法也是从命令行启动：

[source,console]
-----
$ git gui
-----

它的界面长这个样子：

.`git-gui` 提交工具。
image::images/git-gui.png[`git-gui` 提交工具。]

左侧是索引区；未暂存的修改显示在上方，已暂存的修改显示在下方。
你可以通过点击文件名左侧的图标来将该文件在暂存状态与未暂存状态之间切换，你也可以通过选中一个文件名来查看它的详情。

右侧窗口的上方以 diff 格式来显示当前选中文件发生了变动的地方。
你可以通过右击某一区块或行从而将这一区块或行放入暂存区。

右侧窗口的下方是写日志和执行操作的地方。
在文本框中键入日志然后点击 ``提交'' 就和执行 `git commit` 的效果差不多。
如果你想要修订上一次提交, 可以选中``修订'' 按钮，上次一提交的内容就会显示在 ``暂存区''。
然后你就可以简单的对修改进行暂存和取消暂存操作，更新提交日志，然后再次点击 ``提交'' 用这个新的提交来覆盖上一次提交。

`gitk` 和 `git-gui` 就是针对某种任务设计的工具的两个例子。
它们分别为了不同的目的（即查看历史和制作提交）而进行了精简，略去了用不到的功能。


==== 其它图形界面

除此之外，还有许许多多其它的图形化 Git 客户端，其中既有单一功能的定制工具，也有试图提供 Git 所有功能的复杂应用。
Git 的官方网站整理了一份时下最流行的客户端的清单 http://git-scm.com/downloads/guis[]。
在 Git 的维基站点还可以看到一份更全的清单 https://git.wiki.kernel.org/index.php/Interfaces,_frontends,_and_tools#Graphical_Interfaces[].
