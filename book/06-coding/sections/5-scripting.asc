=== 脚本 CODING

所以现在我们已经介绍了 CODING 的一些工作流程，但是任意一个小组或项目都会去自定义，因为他们想要创造或扩展想要整合的服务。

对我们来说很幸运的是，CODING 在许多方面都真的很方便扩展。
在本节中我们将会介绍如何使用 CODING 钩子系统与 API 接口，使 CODING 按照我们的设想来工作。

==== 钩子

如果需要做一些更具体的事，或者想要整合一个不在这个列表中的服务或站点，可以转而使用更通用的钩子系统。
CODING 仓库钩子是非常简单的。
指定一个 URL 然后 CODING 在任一期望的事件发生时就会发送一个 HTTP 请求到那个 URL 。

通常做这件事的方式是可以设置一个小的 web 服务来监听 CODING 钩子请求然后使用收到的数据做一些事情。

为了启用一个钩子，点击 ``新建 webhook'' 按钮。
这会将你引导至一个类似 <<r_web_hook>> 的页面。

[[r_web_hook]]
.WebHook 配置
image::images/scripting-03-webhook.png[Web 钩子配置]

WebHook 的设置非常简单。
大多数情况下只需要输入一个 URL 与一个密钥然后点击 ``新建 webhook''。
有几个选项可以指定在哪个事件时想要 CODING 发送请求 -- 默认的行为是只有当某人推送新代码到仓库的任一分支时的 `push` 事件获得一个请求。

让我们看一个设置处理 WebHook 的 web 服务的小例子。
我们将会使用 Python ，因为它相当简洁，应该能够轻松地看到我们正在做什么。

假设我们想要在某个特定的人推送到我们的项目的特定分支并修改一个特定文件时得到一封邮件。
我们可以相当容易地使用类似下面的代码做到：

[source,python]
----
from bottle import Bottle, run, request, abort
import hmac

app = Bottle()

SECRET_TOKEN='123'

@app.get('/')
def index():
	return 'hello world'

@app.post('/webhook')
def webhook():
	event = request.get_header('X-Coding-Event')
	delivery = request.get_header('X-Coding-Delivery')
	webHook_version = request.get_header('X-Coding-WebHook-Version')
	signature = request.get_header('X-Coding-Signature')
	content = request.body.read()
	sha1 = hmac.new(bytes(SECRET_TOKEN, encoding = "utf8"), content, 'sha1')
	sha1 = sha1.hexdigest()
	calculate_signature = 'sha1=' + sha1
	if not calculate_signature == signature:
		abort(400, 'signature failed.')

	json = request.json
	sender = json['sender']
	login = sender['login']
	print('webhook ' + event + ' event from ' + login)
	return json

run(app, host='0.0.0.0', port=8080, debug=True)
----

这里我们拿到一个 CODING 传送给我们的 JSON 请求然后查找推送者，他们推送到了什么分支以及推送的所有提交都改动了哪些文件。
然后我们检查它是否与我们的条件区配，如果匹配则发送一封邮件。

为了开发与测试类似这样的东西，在设置钩子的地方有一个漂亮的开发者控制台。
可以看到 CODING 为那个 WebHook 的最后几次请求。
对每一个钩子，当它发送后都可以深入挖掘，检测它是否是成功的与请求及回应的消息头与消息体。
这使得测试与调试钩子非常容易。

[[r_web_hook_debug]]
.Web 钩子调试信息
image::images/scripting-04-webhook-debug.png[Web 钩子调试信息]

=== CODING API

(((CODING, API)))
服务与钩子给你提供了一种方式来接收关于在仓库中发生的事件的推送通知，但是如何获取相关事件的详情呢？如何自动化一些诸如添加协作者或给问题加标签的事情呢？

这是 CODING API 派上用场的地方。
在自动化流行的趋势下，CODING 提供了大量的 API 接口，可以进行几乎任何能在网站上进行的操作。